#!/usr/bin/env python3
"""
Script de test pour v√©rifier la connexion √† l'API Groq
"""

import os
from dotenv import load_dotenv
from groq import Groq

def test_groq_connection():
    """Test de connexion √† l'API Groq"""
    print("üîç Test de connexion √† l'API Groq...")
    print("=" * 50)
    
    # Charger les variables d'environnement
    load_dotenv()
    
    # V√©rifier si la cl√© API est pr√©sente
    api_key = os.getenv("GROQ_API_KEY")
    if not api_key:
        print("‚ùå ERREUR: GROQ_API_KEY non trouv√©e dans le fichier .env")
        print("   Assurez-vous que votre fichier .env contient: GROQ_API_KEY=votre_cl√©_ici")
        return False
    
    print(f"‚úÖ Cl√© API trouv√©e: {api_key[:10]}...{api_key[-4:]}")
    
    try:
        # Initialiser le client Groq
        print("üîÑ Initialisation du client Groq...")
        client = Groq(api_key=api_key)
        print("‚úÖ Client Groq initialis√© avec succ√®s")
        
        # Test simple avec un prompt court (utiliser un mod√®le plus r√©cent)
        print("üß™ Test d'un appel API simple...")
        response = client.chat.completions.create(
            model="llama3-70b-8192",  # Mod√®le pour l'analyse de texte
            messages=[
                {"role": "system", "content": "Tu es un assistant utile."},
                {"role": "user", "content": "Dis-moi simplement 'Bonjour, l'API Groq fonctionne !' en fran√ßais."}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        # Afficher la r√©ponse
        content = response.choices[0].message.content.strip()
        print(f"‚úÖ R√©ponse re√ßue: {content}")
        
        # Test avec le mod√®le utilis√© dans l'application
        print("\nüß™ Test avec le mod√®le de l'application...")
        test_text = "Ceci est un document de test pour v√©rifier l'analyse IA."
        
        system_prompt = """Tu es un assistant expert en analyse de documents. 
Analyse le document fourni et retourne une r√©ponse en JSON avec exactement cette structure:
{
    "summary": "Un r√©sum√© d√©taill√© du document en fran√ßais",
    "keyPoints": ["Point cl√© 1", "Point cl√© 2", "Point cl√© 3"],
    "actions": ["Action recommand√©e 1", "Action recommand√©e 2", "Action recommand√©e 3"]
}"""

        response = client.chat.completions.create(
            model="llama3-70b-8192",  # Mod√®le pour l'analyse de texte
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Analyse ce document:\n\n{test_text}"}
            ],
            max_tokens=300,
            temperature=0.3
        )
        
        content = response.choices[0].message.content.strip()
        print(f"‚úÖ R√©ponse d'analyse re√ßue: {content[:100]}...")
        
        print("\nüéâ TOUS LES TESTS SONT PASS√âS !")
        print("   Votre cl√© API Groq fonctionne parfaitement.")
        print("   L'application devrait maintenant pouvoir analyser vos PDF.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du test: {str(e)}")
        print("\nüîß Solutions possibles:")
        print("   1. V√©rifiez que votre cl√© API est correcte")
        print("   2. V√©rifiez votre connexion internet")
        print("   3. V√©rifiez que vous avez des cr√©dits sur votre compte Groq")
        print("   4. Essayez de r√©g√©n√©rer votre cl√© API")
        return False

if __name__ == "__main__":
    test_groq_connection() 